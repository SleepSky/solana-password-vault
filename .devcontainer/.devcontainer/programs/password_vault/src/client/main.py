import asyncio
import base64
import json
import hashlib
import base58
from os import urandom
from solders.keypair import Keypair
from solders.pubkey import Pubkey
from solders.hash import Hash
from solders.instruction import Instruction, AccountMeta, CompiledInstruction
from solders.message import MessageV0, MessageHeader
from solders.transaction import VersionedTransaction
from solders.compute_budget import set_compute_unit_limit, set_compute_unit_price
from solders.rpc.responses import GetTransactionResp
from solana.rpc.async_api import AsyncClient
from solana.rpc.types import TxOpts
from cryptography.fernet import Fernet
from typing import Optional

DEVNET_URL = "http://localhost:8899"
PROGRAM_ID = Pubkey.from_string("GCA4aqiUT57vPoc6seLrSLBXk9BRnp3Ptpqb6nbg19JH")  # Updated Program ID
SYS_PROGRAM_ID = Pubkey.from_string("11111111111111111111111111111111")

def load_keypair(filename: str) -> Keypair:
    with open(filename, "r") as f:
        keypair_data = json.load(f)
    secret_key = base58.b58decode(keypair_data["secret_key"])
    return Keypair.from_bytes(secret_key)

def get_random_bytes(length: int) -> bytes:
    return urandom(length)

def encrypt_password(password: str, key: bytes) -> str:
    cipher = Fernet(base64.urlsafe_b64encode(key))
    return base64.b64encode(cipher.encrypt(password.encode('utf-8'))).decode('ascii')

def decrypt_password(encrypted_password: str, key: bytes) -> str:
    cipher = Fernet(base64.urlsafe_b64encode(key))
    encrypted_bytes = base64.b64decode(encrypted_password.encode('ascii'))
    return cipher.decrypt(encrypted_bytes).decode('utf-8')

def save_encryption_key(key: bytes, filename: str):
    with open(filename, "wb") as f:
        f.write(key)
    print(f"üîë –ö–ª—é—á —à–∏—Ñ—Ä—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É {filename}")

async def get_minimum_balance_for_rent_exemption(client: AsyncClient, data_size: int) -> int:
    print("üìè –û—Ç—Ä–∏–º–∞–Ω–Ω—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å—É –¥–ª—è —Ä–µ–Ω—Ç–∏...")
    resp = await client.get_minimum_balance_for_rent_exemption(data_size, commitment="confirmed")
    return resp.value

async def request_airdrop_if_needed(client: AsyncClient, pubkey: Pubkey) -> bool:
    print("üí∞ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É...")
    balance = await client.get_balance(pubkey, commitment="confirmed")
    print(f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance.value / 1e9} SOL")
    if balance.value / 1e9 < 0.5:
        print("üíß –ó–∞–ø–∏—Ç airdrop 1 SOL...")
        try:
            airdrop_sig = await client.request_airdrop(pubkey, 1_000_000_000)
            await client.confirm_transaction(airdrop_sig.value, commitment="confirmed")
            print("‚úÖ Airdrop –≤–∏–∫–æ–Ω–∞–Ω–æ!")
            return True
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ airdrop: {str(e)}")
            return False
    print("‚úÖ –ë–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–Ω—ñ–π, airdrop –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω")
    return True

async def store_encrypted_password(client: AsyncClient, payer: Keypair, storage_account_pubkey: Pubkey, encrypted_password: str, bump: int) -> bool:
    print("üóÑÔ∏è –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è –≤ –∞–∫–∞—É–Ω—Ç—ñ...")
    try:
        space = 8 + 1 + 4 + 1024 + 1
        lamports = await get_minimum_balance_for_rent_exemption(client, space)
        print(f"üìä –ü–æ—Ç—Ä—ñ–±–Ω–æ lamports: {lamports}")

        encrypted_bytes = base64.b64decode(encrypted_password.encode('ascii'))
        print(f"üîç –ü–µ—Ä—à—ñ 20 –±–∞–π—Ç encrypted_bytes (hex): {encrypted_bytes[:20].hex()}")
        print(f"üîí –†–æ–∑–º—ñ—Ä –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è: {len(encrypted_bytes)} –±–∞–π—Ç")

        # –°—Ç–≤–æ—Ä—é—î–º–æ –º–∞—Å–∏–≤ —Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É (109 –±–∞–π—Ç) –¥–ª—è data
        data = bytearray(109)
        data[0:100] = encrypted_bytes  # 100 –±–∞–π—Ç –¥–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
        data[100] = bump  # 1 –±–∞–π—Ç –¥–ª—è bump
        data[101:109] = bytes([0] * 8)  # –ó–∞–ø–æ–≤–Ω—é—î–º–æ 8 –±–∞–π—Ç –Ω—É–ª—ñ–≤

        data_len = 101  # 100 –±–∞–π—Ç encrypted_bytes + 1 –±–∞–π—Ç bump

        # –§–æ—Ä–º—É—î–º–æ instruction_data: data (109 –±–∞–π—Ç) + data_len (4 –±–∞–π—Ç–∏) + bump (1 –±–∞–π—Ç)
        instruction_data = bytes(data) + data_len.to_bytes(4, byteorder='little') + bytes([bump])
        print(f"üîç –ü–æ–≤–Ω–∏–π instruction_data (hex): {instruction_data.hex()}")  # –î–æ–¥–∞–Ω–µ –¥–µ–±–∞–≥—É–≤–∞–Ω–Ω—è

        print(f"üîç –î–æ–≤–∂–∏–Ω–∞ instruction_data: {len(instruction_data)} –±–∞–π—Ç")
        print(f"üîç –î–æ–≤–∂–∏–Ω–∞ encrypted_bytes: {len(encrypted_bytes)} –±–∞–π—Ç")
        print(f"üîç Bump: {bump}")
        print(f"üîç data_len: {data_len}")

        accounts = [
            AccountMeta(pubkey=storage_account_pubkey, is_signer=False, is_writable=True),
            AccountMeta(pubkey=payer.pubkey(), is_signer=True, is_writable=True),
            AccountMeta(pubkey=SYS_PROGRAM_ID, is_signer=False, is_writable=False),
        ]

        initialize_ix = Instruction(
            program_id=PROGRAM_ID,
            accounts=accounts,
            data=instruction_data
        )

        compute_unit_limit_ix = set_compute_unit_limit(600_000)
        compute_unit_price_ix = set_compute_unit_price(0)

        async with asyncio.timeout(10):
            blockhash_resp = await client.get_latest_blockhash(commitment="confirmed")
            recent_blockhash = blockhash_resp.value.blockhash
            print(f"üîÑ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è blockhash: {recent_blockhash}")

        account_keys = [
            payer.pubkey(),
            storage_account_pubkey,
            SYS_PROGRAM_ID,
            Pubkey.from_string("ComputeBudget111111111111111111111111111111"),
            PROGRAM_ID,
        ]

        message = MessageV0(
            header=MessageHeader(num_required_signatures=1, num_readonly_signed_accounts=0, num_readonly_unsigned_accounts=2),
            account_keys=account_keys,
            recent_blockhash=recent_blockhash,
            instructions=[
                CompiledInstruction(program_id_index=3, accounts=bytes([0]), data=compute_unit_limit_ix.data),
                CompiledInstruction(program_id_index=3, accounts=bytes([0]), data=compute_unit_price_ix.data),
                CompiledInstruction(program_id_index=4, accounts=bytes([1, 0, 2]), data=initialize_ix.data),
            ],
            address_table_lookups=[]
        )

        transaction = VersionedTransaction(message, [payer])

        send_opts = TxOpts(
            skip_preflight=False,
            preflight_commitment="confirmed",
            max_retries=3
        )

        print("üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó...")
        result = await client.send_transaction(transaction, opts=send_opts)
        tx_id = result.value
        print(f"üì§ –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –∑ ID: {tx_id}")

        print("‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó...")
        async with asyncio.timeout(15):
            confirmation = await client.get_transaction(tx_id, commitment="confirmed")
            if isinstance(confirmation, GetTransactionResp) and confirmation.value is not None:
                if confirmation.value.transaction.meta is not None and confirmation.value.transaction.meta.err is None:
                    print("‚úÖ –ê–∫–∞—É–Ω—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —Ç–∞ –ø–∞—Ä–æ–ª—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")
                else:
                    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: {confirmation.value.transaction.meta.err}")
                    return False
            else:
                print("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞")
                return False

        return True
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è: {str(e)}")
        raise

async def retrieve_encrypted_password(client: AsyncClient, storage_account_pubkey: Pubkey) -> str:
    print("üì• –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è –∑ –∞–∫–∞—É–Ω—Ç–∞...")
    try:
        account_info = await client.get_account_info(storage_account_pubkey, commitment="confirmed")
        if account_info.value is None:
            print("‚ùå –ê–∫–∞—É–Ω—Ç –Ω–µ —ñ—Å–Ω—É—î")
            raise Exception("Account not found")

        data = account_info.value.data
        if len(data) < 8:
            print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –≤ –∞–∫–∞—É–Ω—Ç—ñ")
            raise Exception("Invalid account data")

        encrypted_bytes = data[8:]
        encrypted = base64.b64encode(encrypted_bytes).decode('ascii')
        print("‚úÖ –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–π –ø–∞—Ä–æ–ª—å –æ—Ç—Ä–∏–º–∞–Ω–æ!")
        return encrypted
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è: {str(e)}")
        raise

async def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–∏...")
    client = AsyncClient(DEVNET_URL)
    try:
        print("üîë –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—é—á—ñ–≤...")
        payer = load_keypair("payer.json")
        seeds = [bytes(payer.pubkey()), b"password_vault"]
        storage_account_pubkey, bump = Pubkey.find_program_address(seeds, PROGRAM_ID)  # Use PROGRAM_ID
        print(f"üóÑÔ∏è Storage account (PDA): {storage_account_pubkey}")
        print(f"üîë Payer: {payer.pubkey()}")

        print("üåßÔ∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ airdrop...")
        if not await request_airdrop_if_needed(client, payer.pubkey()):
            print("\n‚ÑπÔ∏è –û—Ç—Ä–∏–º—ñ–π—Ç–µ SOL –≤—Ä—É—á–Ω—É —á–µ—Ä–µ–∑ https://solfaucet.com...")
            print(f"–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –ø—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á: {payer.pubkey()}\n")
            print("‚ùå –ü—Ä–æ–≥—Ä–∞–º–∞ –∑—É–ø–∏–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É airdrop")
            return

        print("üîê –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è...")
        password = input("–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å: ")
        if not password:
            print("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º")
            return

        encryption_key = get_random_bytes(32)
        encrypted = encrypt_password(password, encryption_key)
        print(f"üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–π –ø–∞—Ä–æ–ª—å: {encrypted[:50]}...")
        save_encryption_key(encryption_key, "encryption_key.txt")

        if await store_encrypted_password(client, payer, storage_account_pubkey, encrypted, bump):
            print("üíæ –ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –∞–∫–∞—É–Ω—Ç—ñ!")

            retrieved_encrypted = await retrieve_encrypted_password(client, storage_account_pubkey)
            print(f"üì• –û—Ç—Ä–∏–º—ñ–∞–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–π –ø–∞—Ä–æ–ª—å: {retrieved_encrypted[:50]}...")

            decrypted = decrypt_password(retrieved_encrypted, encryption_key)
            print(f"üîì –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å: {password}")
            print(f"üîì –†–æ–∑—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–π –ø–∞—Ä–æ–ª—å: {decrypted}")
        else:
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –ø–∞—Ä–æ–ª—å")

    except Exception as e:
        print(f"üî• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")
    finally:
        await client.close()
        print("üîå –ó'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ")

if __name__ == "__main__":
    asyncio.run(main())
